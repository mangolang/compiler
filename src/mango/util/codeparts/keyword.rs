use mango::util::strtype::Msg;
use mango::util::strtype::StrType;
use std::fmt::Display;
use std::fmt::Formatter;
use std::fmt::Result as fResult;

/// The different operator codeparts that are recognized.
// TODO: reserve a lot of keywords; easier to remove than add (compatibility)
#[derive(Debug, PartialEq, Eq, Hash, Clone)]
pub enum Keyword {
    Let,
    Mut,
    If,
    For,
    While,
    Function,
    Return,
    Reserved(String),
}

impl Keyword {
    pub fn from_str(symbol_txt: &str) -> Result<Self, Msg> {
        match symbol_txt {
            "let" => Ok(Keyword::Let),
            "mut" => Ok(Keyword::Mut),
            "if" => Ok(Keyword::If),
            "for" => Ok(Keyword::For),
            "while" => Ok(Keyword::While),
            "fun" => Ok(Keyword::Function),
            "return" => Ok(Keyword::Return),

            "abstract" => Ok(Keyword::Reserved(box "abstract")),
            "alias" => Ok(Keyword::Reserved(box "alias")),
            "all" => Ok(Keyword::Reserved(box "all")),
            "and" => Ok(Keyword::Reserved(box "and")),
            "annotation" => Ok(Keyword::Reserved(box "annotation")),
            "any" => Ok(Keyword::Reserved(box "any")),
            "as" => Ok(Keyword::Reserved(box "as")),
            "assert" => Ok(Keyword::Reserved(box "assert")),
            "async" => Ok(Keyword::Reserved(box "async")),
            "await" => Ok(Keyword::Reserved(box "await")),
            "become" => Ok(Keyword::Reserved(box "become")),
            "bool" => Ok(Keyword::Reserved(box "bool")),
            "box" => Ok(Keyword::Reserved(box "box")),
            "break" => Ok(Keyword::Reserved(box "break")),
            "by" => Ok(Keyword::Reserved(box "by")),
            "byte" => Ok(Keyword::Reserved(box "byte")),
            "catch" => Ok(Keyword::Reserved(box "catch")),
            "class" => Ok(Keyword::Reserved(box "class")),
            "closed" => Ok(Keyword::Reserved(box "closed")),
            "companion" => Ok(Keyword::Reserved(box "companion")),
            "const" => Ok(Keyword::Reserved(box "const")),
            "constructor" => Ok(Keyword::Reserved(box "constructor")),
            "continue" => Ok(Keyword::Reserved(box "continue")),
            "data" => Ok(Keyword::Reserved(box "data")),
            "debug" => Ok(Keyword::Reserved(box "debug")),
            "def" => Ok(Keyword::Reserved(box "def")),
            "default" => Ok(Keyword::Reserved(box "default")),
            "defer" => Ok(Keyword::Reserved(box "defer")),
            "del" => Ok(Keyword::Reserved(box "del")),
            "delegate" => Ok(Keyword::Reserved(box "delegate")),
            "delegates" => Ok(Keyword::Reserved(box "delegates")),
            "delete" => Ok(Keyword::Reserved(box "delete")),
            "derive" => Ok(Keyword::Reserved(box "derive")),
            "deriving" => Ok(Keyword::Reserved(box "deriving")),
            "do" => Ok(Keyword::Reserved(box "do")),
            "double" => Ok(Keyword::Reserved(box "double")),
            "dynamic" => Ok(Keyword::Reserved(box "dynamic")),
            "elif" => Ok(Keyword::Reserved(box "elif")),
            "end" => Ok(Keyword::Reserved(box "end")),
            "enum" => Ok(Keyword::Reserved(box "enum")),
            "eval" => Ok(Keyword::Reserved(box "eval")),
            "except" => Ok(Keyword::Reserved(box "except")),
            "extends" => Ok(Keyword::Reserved(box "extends")),
            "extern" => Ok(Keyword::Reserved(box "extern")),
            "false" => Ok(Keyword::Reserved(box "false")),
            "family" => Ok(Keyword::Reserved(box "family")),
            "field" => Ok(Keyword::Reserved(box "field")),
            "final" => Ok(Keyword::Reserved(box "final")),
            "finally" => Ok(Keyword::Reserved(box "finally")),
            "float" => Ok(Keyword::Reserved(box "float")),
            "fn" => Ok(Keyword::Reserved(box "fn")),
            "get" => Ok(Keyword::Reserved(box "get")),
            "global" => Ok(Keyword::Reserved(box "global")),
            "goto" => Ok(Keyword::Reserved(box "goto")),
            "impl" => Ok(Keyword::Reserved(box "impl")),
            "implements" => Ok(Keyword::Reserved(box "implements")),
            "import" => Ok(Keyword::Reserved(box "import")),
            "in" => Ok(Keyword::Reserved(box "in")),
            "init" => Ok(Keyword::Reserved(box "init")),
            "int" => Ok(Keyword::Reserved(box "int")),
            "interface" => Ok(Keyword::Reserved(box "interface")),
            "internal" => Ok(Keyword::Reserved(box "internal")),
            "is" => Ok(Keyword::Reserved(box "is")),
            "it" => Ok(Keyword::Reserved(box "it")),
            "lambda" => Ok(Keyword::Reserved(box "lambda")),
            "lateinit" => Ok(Keyword::Reserved(box "lateinit")),
            "lazy" => Ok(Keyword::Reserved(box "lazy")),
            "local" => Ok(Keyword::Reserved(box "local")),
            "loop" => Ok(Keyword::Reserved(box "loop")),
            "macro" => Ok(Keyword::Reserved(box "macro")),
            "match" => Ok(Keyword::Reserved(box "match")),
            "module" => Ok(Keyword::Reserved(box "module")),
            "move" => Ok(Keyword::Reserved(box "move")),
            "NaN" => Ok(Keyword::Reserved(box "NaN")),
            "native" => Ok(Keyword::Reserved(box "native")),
            "new" => Ok(Keyword::Reserved(box "new")),
            "nill" => Ok(Keyword::Reserved(box "nill")),
            "none" => Ok(Keyword::Reserved(box "none")),
            "null" => Ok(Keyword::Reserved(box "null")),
            "object" => Ok(Keyword::Reserved(box "object")),
            "open" => Ok(Keyword::Reserved(box "open")),
            "operator" => Ok(Keyword::Reserved(box "operator")),
            "or" => Ok(Keyword::Reserved(box "or")),
            "out" => Ok(Keyword::Reserved(box "out")),
            "override" => Ok(Keyword::Reserved(box "override")),
            "package" => Ok(Keyword::Reserved(box "package")),
            "param" => Ok(Keyword::Reserved(box "param")),
            "pass" => Ok(Keyword::Reserved(box "pass")),
            "private" => Ok(Keyword::Reserved(box "private")),
            "public" => Ok(Keyword::Reserved(box "public")),
            "pure" => Ok(Keyword::Reserved(box "pure")),
            "raise" => Ok(Keyword::Reserved(box "raise")),
            "real" => Ok(Keyword::Reserved(box "real")),
            "rec" => Ok(Keyword::Reserved(box "rec")),
            "reified" => Ok(Keyword::Reserved(box "reified")),
            "sealed" => Ok(Keyword::Reserved(box "sealed")),
            "select" => Ok(Keyword::Reserved(box "select")),
            "self" => Ok(Keyword::Reserved(box "self")),
            "set" => Ok(Keyword::Reserved(box "set")),
            "sizeof" => Ok(Keyword::Reserved(box "sizeof")),
            "static" => Ok(Keyword::Reserved(box "static")),
            "struct" => Ok(Keyword::Reserved(box "struct")),
            "super" => Ok(Keyword::Reserved(box "super")),
            "switch" => Ok(Keyword::Reserved(box "switch")),
            "sync" => Ok(Keyword::Reserved(box "sync")),
            "synchronized" => Ok(Keyword::Reserved(box "synchronized")),
            "tailrec" => Ok(Keyword::Reserved(box "tailrec")),
            "this" => Ok(Keyword::Reserved(box "this")),
            "throw" => Ok(Keyword::Reserved(box "throw")),
            "throws" => Ok(Keyword::Reserved(box "throws")),
            "to" => Ok(Keyword::Reserved(box "to")),
            "trait" => Ok(Keyword::Reserved(box "trait")),
            "transient" => Ok(Keyword::Reserved(box "transient")),
            "true" => Ok(Keyword::Reserved(box "true")),
            "try" => Ok(Keyword::Reserved(box "try")),
            "type" => Ok(Keyword::Reserved(box "type")),
            "unsafe" => Ok(Keyword::Reserved(box "unsafe")),
            "until" => Ok(Keyword::Reserved(box "until")),
            "use" => Ok(Keyword::Reserved(box "use")),
            "val" => Ok(Keyword::Reserved(box "val")),
            "var" => Ok(Keyword::Reserved(box "var")),
            "vararg" => Ok(Keyword::Reserved(box "vararg")),
            "virtual" => Ok(Keyword::Reserved(box "virtual")),
            "volatile" => Ok(Keyword::Reserved(box "volatile")),
            "when" => Ok(Keyword::Reserved(box "when")),
            "where" => Ok(Keyword::Reserved(box "where")),
            "while" => Ok(Keyword::Reserved(box "while")),
            "with" => Ok(Keyword::Reserved(box "with")),
            "xor" => Ok(Keyword::Reserved(box "xor")),
            "yield" => Ok(Keyword::Reserved(box "yield")),

            _ => Err(Msg::from_valid(&format!(
                "Unknown keywords: '{}'",
                symbol_txt
            ))),
        }
    }
}

impl Display for Keyword {
    fn fmt(&self, f: &mut Formatter) -> fResult {
        write!(
            f,
            "{}",
            match *self {
                Keyword::Let => "let",
                Keyword::Mut => "mut",
                Keyword::If => "if",
                Keyword::For => "for",
                Keyword::While => "while",
                Keyword::Function => "fun",
                Keyword::Return => "return",
            }
        )
    }
}
